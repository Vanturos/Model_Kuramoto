# from itertools import permutations
#
#
# def suka(i, q, j, m, p, A):
#     Indexes = list(permutations([i, q, m, p]))
#     ret = 0
#     for _ in range(24):
#         # print(Indexes[_][0], Indexes[_][1], j, Indexes[_][2], Indexes[_][3])
#         ret += A[Indexes[_][0]][Indexes[_][1]][j][Indexes[_][2]][Indexes[_][3]]
#     return ret
#
#
# A = [[[[[5, 4], [1, - 1]], [[6, 4], [1, -1]]], [[[-5, 5], [1, 3]], [[-1, 0], [-1, 0]]]],
#      [[[[0, 3], [6, 2]], [[-2, -2], [4, 5]]], [[[-1, -4], [6, 1]], [[6, -6], [-5, -3]]]]]
# # print(A[0][0][0][1][0])
# An = [[[[[5, 4], [1, - 1]], [[6, 4], [1, -1]]], [[[-5, 5], [1, 3]], [[-1, 0], [-1, 0]]]],
#      [[[[0, 3], [6, 2]], [[-2, -2], [4, 5]]], [[[-1, -4], [6, 1]], [[6, -6], [-5, -3]]]]]
# for i in range(2):
#     for q in range(2):
#         for j in range(2):
#             for m in range(2):
#                 for p in range(2):
#                     S = suka(i, q, j, m, p, A)
#                     An[i][q][j][m][p] = 1 / 24 * S
# print(*An)
# # while True:
# #     ind = list(map(int, input('Введите индексы: ').split()))
# #     print(An[ind[4]-1][ind[3]-1][ind[2]-1][ind[1]-1][ind[0]-1])
#
# print(An[0][0][0][0][1], An[0][0][0][1][1], An[0][0][1][0][1], An[0][0][1][1][1], An[1][0][0][0][1], An[1][0][0][1][1], An[1][0][1][0][1], An[1][0][1][1][1])
#
# print(An[0][1][0][0][0], An[0][1][0][1][0], An[0][1][1][0][0], An[0][1][1][1][0], An[1][1][0][0][0], An[1][1][0][1][0], An[1][1][1][0][0], An[1][1][1][1][0])
#
# print(An[0][1][0][0][1], An[0][1][0][1][1], An[0][1][1][0][1], An[0][1][1][1][1], An[1][1][0][0][1], An[1][1][0][1][1], An[1][1][1][0][1], An[1][1][1][1][1])



def f(b):
    return -2*b[0]-b[1]-4*b[2]+4*b[3]-5*b[4]


a = [[1, 1, 1, 1, 1], [1, 2, 1, 2, 1], [1, 3, 1, 3, 1], [2, 1, 1, 1, 2], [2, 2, 1, 2, 2], [2, 3, 1, 3, 2], [3, 1, 1, 1, 3], [3, 2, 1, 2, 3], [3, 3, 1, 3, 3]]
s = 0
for elem in a:
    s += f(elem)
    print(f(elem))
print(s, s-36, s-72)